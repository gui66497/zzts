input {
  #stdin {}
  tcp{
    port => "${LS_BXY_NWZDGJ_PORT:10010}"
    #codec => plain{
    #  charset => 'GBK'
    # }
  }
  udp{
    port => "${LS_BXY_NWZDGJ_PORT:10010}"
    #codec => plain{
    #  charset => 'GBK'
    # }
  }
}
filter {if "zzjz"!="zzjz"{
  mutate {
    add_tag => ["_filterDrop"]
  }
}else{

  grok {
    match => {
      "message" => [
        ".*(?<logType>LOG)\*\|(?<user>.*)\*\|\d{4}-\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}:\d{1,2}\*\|(?<clientIps>.*)\*\|(?<msg>.*)",
        ".*(?<logType>(AUD|WAR))\*\|%{NUMBER:classId}\*\|(?<eventName>.*)\*\|\d{4}-\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}:\d{1,2}\*\|(?<clientIps>.*)\*\|(?<mac>.*)\*\|(?<hostName>.*)\*\|(?<location>.*)\*\|(?<userName>.*)\*\|(?<company>.*)\*\|(?<dept>.*)\*\|(?<telphone>.*)\*\|(?<maill>.*)\*\|%{NUMBER:devId}\*\|(?<strategyName>.*)\*\|(?<msg>.*)",
        ".*(?<logType>PEXEC)\*\|%{NUMBER:classId}\*\|%{NUMBER:strategyId}\*\|(?<strategyName>.*)\*\|(?<strategyType>.*)\*\|\d{4}-\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}:\d{1,2}",
        ".*(?<logType>STA)\*\|%{NUMBER:clientCount}\*\|%{NUMBER:registerCount}\*\|%{NUMBER:registerRate}\*\|%{NUMBER:onlineCount}\*\|%{NUMBER:mustRegisterCount}\*\|%{NUMBER:win95}\*\|%{NUMBER:win98}\*\|%{NUMBER:winnt}\*\|%{NUMBER:win2k}\*\|%{NUMBER:winxp}\*\|%{NUMBER:win2k2}\*\|%{NUMBER:vista}\*\|%{NUMBER:win7}\*\|%{NUMBER:win2008}\*\|%{NUMBER:antivirusSoftwareCount}\*\|%{NUMBER:alarmCount}"
      ]
    }
  }

}

  if "_grokparsefailure" in [tags] or "_filterDrop" in [tags] {
  mutate {
    add_field => {
      "[deviceType]"=>"内网终端监管"
    }
  }
}else if [logType]=="WAR" or [logType]=="AUD" {

  clone {
    clones => ["alarm"]
  }

}

mutate {
  split => { "clientIps" => ";" }
}
if [classId] {
mutate {
  convert => {"classId" => "integer"}
}
}
if [type] =="alarm" {
  #mutate {
  #	split => { "clientIps" => ";" }
  #}
  elasticsearch {
    hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}/soc-system/res"]
    query => "ip:(%{[clientIps][0]})"
    index =>"soc-system"
    result_size => 1
    fields => {
      "manager" => "[userName]"
      "used" => "[used]"
      "location" => "[location]"
      "dept" => "[dept]"
    }
  }

  if ![used] {
    mutate {
      add_field => {
              "[used]"=>"终端"
          }
      rename => {
              "manager"=>"[userName]"
           }
         }
  }

      if ![userName] {
    ruby {
      code => "event.set('userName','未知')"
    }
  }

  mutate {
    add_field => {
      "[assetIP]"=>"%{[clientIps][0]}"
          "[assetName]"=>"%{userName}-%{used}-%{assetIP}"
          "[dataType]"=>"用户"
          "[eventType]"=>"终端报警"
      "[eventUserMsg]"=>"%{assetName}的主机发生了%{eventName}"
        }
        rename => {
            "msg"=>"[eventDesc]"
            "dept"=>"[dept]"
         }
       }

       if [classId] == 0 {
       mutate {
    add_field => {
      "[eventScore]"=>85
          "[eventPriority]"=>"高"
        }
        }
       }else if [classId] > 0 and [classId] < 4 {
       mutate {
    add_field => {
      "[eventScore]"=>60
          "[eventPriority]"=>"中"
        }
        }
       }else if [classId] > 3 {
       mutate {
    add_field => {
      "[eventScore]"=>20
          "[eventPriority]"=>"低"
        }
        }
       }

       mutate {
    remove_field => ["logType","classId","clientIps","mac","hostName","userName","company","telphone","maill","devId","strategyName","msg","type","host","message"]
       }

}

mutate {
      convert => {"antivirusSoftwareCount" => "integer"}
      convert => {"registerRate" => "float"}
      convert => {"win7" => "integer"}
      convert => {"mustRegisterCount" => "integer"}
      convert => {"win2k" => "integer"}
      convert => {"win2k2" => "integer"}
      convert => {"vista" => "integer"}
      convert => {"onlineCount" => "integer"}
      convert => {"registerCount" => "integer"}
      convert => {"win95" => "integer"}
      convert => {"winnt" => "integer"}
      convert => {"alarmCount" => "integer"}
      convert => {"clientCount" => "integer"}
      convert => {"win2008" => "integer"}
      convert => {"win98" => "integer"}
      convert => {"winxp" => "integer"}
   }

}

output{
  #stdout {codec => rubydebug }
  if "_grokparsefailure" in [tags] or "_filterDrop" in [tags] {
      elasticsearch {
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          index => "unmatchedlog-%{+YYYY.MM.dd}"
      }
  }else if [eventDesc] {
      elasticsearch {
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          index => "eventlog_%{+YYYY.MM.dd}"
      }
  }else {
      elasticsearch {
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          index => "nwzdjg-%{+YYYY.MM.dd}"
      }
      if [clientIps] {
          elasticsearch{
              hosts => "${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"
              index => "soc-system"
              action => "update"
              document_id => "%{[clientIps][0]}"
              document_type=> "res"
              script => "params.event.remove('strategyName');ctx._source.area=params.event.get('dept');
              ctx._source.dept=params.event.get('dept');def ip=params.event.get('clientIps').get(0);
              ctx._source.ip=ip;ctx._source.ipSection=ip.substring(0,ip.lastIndexOf('.'))+'.0';
              ctx._source.location=params.event.get('location');ctx._source.mac=params.event.get('mac');
              ctx._source.manager=params.event.get('userName');ctx._source.name=params.event.get('userName');
              ctx._source.next_floor='false';ctx._source.used='终端';"
              scripted_upsert => true
          }
      }
  }
}