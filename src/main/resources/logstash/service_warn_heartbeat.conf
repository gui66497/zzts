input {
    udp{
        port => "${LS_SERVICE_WARN_HEARTBEAT_UDP_PORT:9999}"
        codec => "json"
    }
}
filter {
    json {
        source => "message"
    }
    if [monitor][type] == "http" and [monitor][status] == "up" {
        #查询表中有没有此类数据
        #通过主机名,预警原因查看有没有未解决的预警 没有就新增 有则更新持续时间
        elasticsearch {
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}/service_error-*/doc"]
          query => 'ip:"%{[monitor][ip]}" AND serverName:"%{[server_name]}" AND errorReason:"server_delay" AND handled:"未处理"'
          enable_sort => false
          index =>"service_error-*"
          result_size => 1
          fields => {
            "@timestamp" => "[old_timestamp]"
            "duration" => "[duration]"
          }
          docinfo_fields => {
            "_index" => "[old_index]"
            "_id" => "[old_id]"
          }
        }
        #计算持续时间
        if [old_timestamp] {
            
            ruby{
                code => "nowM = DateTime.strptime(event.get('@timestamp').to_s, '%Y-%m-%dT%H:%M:%S.%LZ').strftime('%s');
                         oldM = DateTime.strptime(event.get('old_timestamp').to_s, '%Y-%m-%dT%H:%M:%S.%LZ').strftime('%s');
                         event.set('duration',nowM.to_i - oldM.to_i)"
            }
        }
        #延迟的阈值 五秒即 5000000微秒 这里的3000是测试用的
        if [monitor][duration][us] > 3000 {
            if [old_id] {
                #延迟异常且有记录 更新持续时间
                mutate {  
                    add_tag => ["updateTime"]
                }
                
            } else {
                #服务异常但无记录 新插入
                mutate {  
                    add_tag => ["newInsert"]
                }
                #生成ID
                uuid {
                    target    => "[uuid]"
                    overwrite => true
                }
                mutate {  
                    add_field => {
                        "[errorMsg]" => "服务%{server_name}延迟较高，达到%{[monitor][duration][us]}微秒"
                    }
                }
                
            }
        } else {
            if [old_id] {
                #延迟正常且有记录 置为已处理且更新持续时间
                mutate {  
                    add_tag => ["handled"]
                }
            } else {
                #服务正常且无记录 pass
                drop{ }
            }
        }
    
    } else {
        drop{ }
    }
    
}
output {
    #stdout{codec => rubydebug}
    if "newInsert" in [tags] {
        #新插入一条
        elasticsearch {
            hosts => "${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"
            index => "service_error-%{+YYYY.MM.dd}"
            action => "update"
            document_id => "%{[uuid]}"
            script => "ctx._source['@timestamp']=params.event.get('@timestamp');
            ctx._source.errorType='预警';ctx._source.errorReason='server_delay';ctx._source.serverName=params.event.get('server_name');
            ctx._source.errorMsg=params.event.get('errorMsg');ctx._source.duration=0;
            ctx._source.hostname='';ctx._source.handled = '未处理';
            ctx._source.ip=params.event.get('monitor').get('ip');"
            scripted_upsert => true
        }
    } else if "updateTime" in [tags] {
        #更新持续时间
        elasticsearch {
            hosts => "${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"
            index => "%{[old_index]}"
            action => "update"
            document_id => "%{[old_id]}"
            script => "ctx._source['duration']=params.event.get('duration');"
            scripted_upsert => true
        }
    } else if "handled" in [tags] {
        #存在预警 现已修复 handled置为已处理
        elasticsearch {
            hosts => "${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"
            index => "%{[old_index]}"
            action => "update"
            document_id => "%{[old_id]}"
            script => "ctx._source['duration']=params.event.get('duration');ctx._source['handled']='已处理';"
            scripted_upsert => true
        }
    }
}