input {
  #stdin {
  #}
  jdbc {
    jdbc_connection_string => "jdbc:mysql://${LS_ZABBIX_MYSQL_HOST:192.168.1.171}:${LS_ZABBIX_MYSQL_PORT:3306}/zabbix?useUnicode=true&amp;characterEncoding=utf-8"
    jdbc_user => "zabbix"
    jdbc_password => "zabbix"
    #jdbc_driver_library => "E:\zzjz_work\同步部署\docker_install\soc\docker\soc\logstash\scripts\mysql-connector-java-5.1.42.jar"
    jdbc_driver_library => "/mysql-connector-java-5.1.42.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    #statement => "SELECT itemid,FROM_UNIXTIME(clock) clock,value FROM history_text WHERE clock > unix_timestamp(:sql_last_value) ORDER BY clock"
    statement =>"SELECT itemid, clock,value FROM history_text WHERE value !=''  and  clock > unix_timestamp(convert_tz(:sql_last_value, '+00:00', '+08:00'))"
    #statement =>"SELECT itemid, clock,value FROM history_text WHERE value !='' and clock > '1537859052'"
    schedule => "*/30 * * * *"
    type =>"zabbix_history_text"
    jdbc_paging_enabled => true
    #last_run_metadata_path => "D:\zzjz_work\logstash-6.2.2\config\sql_last_value_path\zabbix\logstash_jdbc_last_run"
  }
}

filter {
   
   if[type]=="zabbix_history_text"{
        elasticsearch {
            hosts => ["192.168.1.188:9200/zabbix_items/doc"]
            query => "itemid:%{itemid}"
            index =>"zabbix_items"
            fields => {  
                "ip" => "[res][ip]"
                "macaddress" => "res_macaddress"
                "name" => "[item][name]"
                "description" => "[item][description]"
            }
        }
        if[res_macaddress]{
            mutate{
                convert => ["%{res_macaddress}", "string"]
                gsub => ["res_macaddress",":","-"]
            }
        }
        date {
            match => [ "clock" , "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
        mutate {
           convert => ["%{value}", "string"] 
            gsub => ["value","\[[\u4e00-\u9fa5]+\]+\s?\r\n",""]
            gsub => ["value","\r\n","###"]
        }
      if   [value] =~".*CSName.*"{
            ruby{
              code => "
                    str=event.get('value')
                    arrs=str.split('###')
                    ##1primary_info.log
                    if str.include?'IPAddress' 
                        h=Hash.new
                        network=Hash.new
                        h['network']=[]
                        arrs.each do |value|     
                           kv=value.split('=')
                           key=kv[0]
                           if key == 'Caption'
                               network['Caption']=kv[1]
                           elsif  key == 'IPAddress'
                               network['IPAddress']=kv[1]     
                           elsif  key == 'IPSubnet'
                               network['IPSubnet']=kv[1]     
                           elsif  key == 'MACAddress'
                               network['MACAddress']=kv[1]     
                           else
                               event.set(key,kv[1])
                           end
                           if network.size == 4
                               h['network'][h['network'].size]=network
                               network=Hash.new                     
                           end
                        end   
                        event.set('network',h)               
                    end
               
                "
            }
        }
        ##2computer_info.log
        else if [value] =~".*CurrentClockSpeed.*"{
            ruby{
                code => "
                    str=event.get('value')
                    arrs=str.split('###')
                    arrs.each do |value|
                        kv=value.split('=')
                        if kv.size ==1
                           next
                        end
                        if kv[1].include?'Windows'
                           event.set('Windows_Caption',kv[1])
                        else     
                           event.set(kv[0],kv[1])
                        end  
                    end  
        
                "
            }
        }
        ##3.disk_info.log        
        else if [value] =~".*DeviceID.*"{
            ruby{
                code => "
                    str=event.get('value')
                    arrs=str.split('###')
                    disks=Hash.new
                    sizes=[]
                    h=Hash.new
                    keys=[]
                    h=[]
                    papartitions=Hash.new
                    partition_info=[]
                    arrs.each do |value|
                        kv=value.split('=')
                        key=kv[0]
                        if key == 'Caption'
                            disks['Caption']=kv[1]
                        elsif  key == 'DeviceID'
                            disks['DeviceID']=kv[1]     
                        elsif key=='Size'
                            sizes[sizes.size]=kv[1]
                        elsif key.include?'FileSystem'
                           keys=key.split(' ') 
                        else
                            papartition=key.split(' ')
                            papartitions[keys[0]]=papartition[0]
                            papartitions[keys[1]]=papartition[1]
                            papartitions[keys[2]]=papartition[2]
                            if papartition.size < 4
                              papartitions[keys[6]]=nil
                            else 
                              papartitions[keys[6]]=papartition[papartition.size-1]
                            end
                            if papartitions.size == 4
                               partition_info[partition_info.size]=papartitions      
                               papartitions=Hash.new
                            end
                        end
                        if disks.size == 2
                            h[h.size]=disks
                            disks=Hash.new                     
                        end
                    end
                    event.set('partition_info',partition_info)
                    event.set('sizes',sizes)
                    event.set('disks',h)
                                   
                "
            }
        }

   
        ##11antivirus_info.log        
        else if [value] =~".*displayName.*"{
            ruby{
                code => "
                        str=event.get('value')
                        arrs=str.split('###')
                        antivirus=Hash.new
                        h=[]
                        arrs.each do |value|     
                          kv=value.split('=')
                          key=kv[0]
                          if key == 'displayName'
                              antivirus['displayName']=kv[1]
                          elsif  key == 'pathToSignedProductExe'
                              antivirus['pathToSignedProductExe']=kv[1]     
                          elsif  key == 'productState'
                              antivirus['productState']=kv[1]     
                          end
                          if antivirus.size == 3
                              h[h.size]=antivirus
                              antivirus=Hash.new                     
                          end
                        end
                        event.set('antivirus',h)
                   
                "
            }
        } 

        ##12.limit_info.log        
        else if [value] =~".*共享名.*"{
            ruby{
                code => "
                        str=event.get('value')
                        arrs=str.split('###')
                        limit_info=Hash.new
                        keys=[]
                        h=[]
                        arrs.each do |value|     
                            kv=value.split(' ')
                            if value.include?'共享名'
                                keys=kv
                            elsif value.include?'IPC'
                                limit_info[keys[0]]=kv[0]
                                if kv.size == 2
                                    limit_info[keys[1]]=nil
                                    limit_info[keys[2]]=kv[1]
                                else 
                                    limit_info[keys[1]]=kv[1]
                                    limit_info[keys[2]]=kv[2]
                                end
                            elsif kv.size==1
                                next
                            else
                                limit_info[keys[0]]=kv[0]
                                limit_info[keys[1]]=kv[1]
                                limit_info[keys[2]]=kv[2]
                            end
                            if limit_info.size == 3
                              h[h.size]=limit_info
                              limit_info=Hash.new                     
                            end
                        end
                          
                        event.set('limit_info',h)
                   
                "
            }
        } 
        ##20.wireless_info.log        
        else if [value] =~".*No matching.*"{
            ruby{
                code => "
                        str=event.get('value')
                        arrs=str.split('###')
                        wireless_info=[]
                        arrs.each do |v|
                            if v.include?'No matching'
                               next
                            else
                               wireless_info[wireless_info.size]=v
                            end 
                        end   
                        event.set('wireless_info',wireless_info)
                   
                "
            }
        } 
        
        ##15.powonoff_info.log        
        else if [value] =~".*Event\[\d+\]:.*"{
            
              mutate {
            gsub => ["value","Event\[\d+\]:###",""]
            }
            ruby{
                code => "
                        str=event.get('value')
                        arrs=str.split('###').map{|value| value.strip.split(':')}
                        event_info=[]
                        ev=Hash.new
                        arrs.each do |key|
                             if key[0].include?'事件日志'
                                 ev['Description']=key[0]
                                 event_info[event_info.size]=ev
                                 ev=Hash.new
                             else
                                ev[key[0]]=key[1]
                             end
                        end   
                        event.set('event_info',event_info)
                   
                "
            }
        }
          ##23.vm_info.log        
        else if [value] =~".*(vmware|vm|virtual).*"{
            ruby{
                code => "
                        str=event.get('value')
                        arrs=str.split('###')
                        vm_info=[]
                        vm=Hash.new
                        if arrs.size < 7
                            
                            arrs.each_index do |i|
                                if arrs[i].include?'虚拟机安装情况'
                                   next
                                end
                                if i%2 == 1
                                   vm[arrs[i]]=arrs[i+1]
                                else
                                    next
                                end                            
                                
                                if vm.size >0
                                   vm_info[vm_info.size]=vm
                                   vm=Hash.new
                                end
                            end   
                            event.set('vm_info',vm_info)
                        end
                "
            }
        }
        
        ##14.ie_info.log        
        else if [value] =~".*URL,Title.*"{
            
            ruby{
                code => "
                        str=event.get('value')
                        arrs=str.split('###').map{|value| value.strip.split(',')}
                        history_info=[]
                        keys=[]
                        
                        arrs.each do |key|
                             if key[0].include?'svcVersion'
                                kv=key[0].split('=')
                                event.set('svcVersion',kv[1])
                             elsif key[0].include?'svcUpdateVersion'
                                 kv=key[0].split('=')
                                 event.set('svcUpdateVersion',kv[1])
                             elsif key.include?('Title')
                                 keys=key
                             elsif key.size == 1
                                 next
                             else    
                                 history_info[history_info.size]=Hash[keys.zip(key)]
                             end
                        end   
                        event.set('history_info',history_info)
                   
                "
            }
        }
          
         
        
   }
}
output {
	#stdout {codec => rubydebug }
	if [network]{
      elasticsearch {
          #ESIP地址与端口
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          #ES索引名称（自己定义的）
          index => "zabbix_primary-%{+YYYY.MM.dd}"
          document_id => "%{itemid}"
          doc_as_upsert => true
      }
  }
  else if [CSDVersion]{
      elasticsearch {
          #ESIP地址与端口
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          #ES索引名称（自己定义的）
          index => "zabbix_computer"
          document_id => "%{itemid}"
          doc_as_upsert => true
      }
  }
  else if [disks]{
      elasticsearch {
          #ESIP地址与端口
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          #ES索引名称（自己定义的）
          index => "zabbix_disk_info"
          document_id => "%{itemid}"
          doc_as_upsert => true
      }
  }
  else if [antivirus]{
      elasticsearch {
          #ESIP地址与端口
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          #ES索引名称（自己定义的）
          index => "zabbix_antivirus_info"
          document_id => "%{itemid}"
          doc_as_upsert => true
      }
  }
  else if [limit_info]{
      elasticsearch {
          #ESIP地址与端口
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          #ES索引名称（自己定义的）
          index => "zabbix_limit_info"
          document_id => "%{itemid}"
          doc_as_upsert => true
      }
  }
  else if [history_info]{
      elasticsearch {
          #ESIP地址与端口
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          #ES索引名称（自己定义的）
          index => "zabbix_url_history"
          document_id => "%{itemid}"
      }
  }

  else if [event_info]{
      elasticsearch {
          #ESIP地址与端口
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          #ES索引名称（自己定义的）
          index => "zabbix_event_info"
          document_id => "%{itemid}"
      }
  }

  else if [wireless_info]{
      elasticsearch {
          #ESIP地址与端口
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          #ES索引名称（自己定义的）
          index => "zabbix_wireless_info"
          document_id => "%{itemid}"
          doc_as_upsert => true
      }
  }
  else if [vm_info]{
      elasticsearch {
          #ESIP地址与端口
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          #ES索引名称（自己定义的）
          index => "zabbix_vm_info"
          document_id => "%{itemid}"
          doc_as_upsert => true
      }
  }
  else {
      elasticsearch {
          #ESIP地址与端口
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          #ES索引名称（自己定义的）
          index => "zabbix_test-%{+YYYY.MM.dd}"
      }
  }
}
