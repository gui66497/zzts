input {
    udp{
        port => "${LS_NMAP_UDP_PORT:6669}"
        codec => "json"
    }
}
filter {
    json {
        source => "message"
    }

    elasticsearch {
        hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}/soc-system/res"]
        query => "_exists_:ip and !ip:10.1.230.61"
        index => "soc-system"
        result_size => 500
        fields => {
            "ip" => "[ips]"
        }
    }
    #只监视soc-system表里的ip
    if [ipv4] not in [ips] {
        drop { }
    }

    if [status][state] == "down" {
        elasticsearch {
            hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}/service_error-*/doc"]
            query => 'ip:"%{[ipv4]}" AND errorReason:"nmap_lost" AND handled:"未处理"'
            enable_sort => false
            index => "service_error-*"
            result_size => 1
            fields => {
                "@timestamp" => "[old_timestamp]"
                "duration" => "[duration]"
            }
            docinfo_fields => {
                "_index" => "[old_index]"
                "_id" => "[old_id]"
            }
        }

        ruby {
            code => "event.set('errorMsg','无法连接IP为'+event.get('ipv4')+'的目标主机')"
        }
        if [old_id] {
            #存在了数据
            #计算持续时间
            ruby{
                code => "nowM = DateTime.strptime(event.get('@timestamp').to_s, '%Y-%m-%dT%H:%M:%S.%LZ').strftime('%s');
                oldM = DateTime.strptime(event.get('old_timestamp').to_s, '%Y-%m-%dT%H:%M:%S.%LZ').strftime('%s');
                event.set('duration', nowM.to_i - oldM.to_i)"
            }
        }

    } else if [status][state] == "up" {
        #机器开了 查询有没有故障状态 如果有则把它置为已处理
        elasticsearch {
            hosts => ["${LS_ES_HOST:localhost}:${LS_ES_PORT:9200}/service_error-*/doc"]
            query => 'ip:"%{[ipv4]}" AND errorReason:"nmap_lost" AND handled:"未处理"'
            enable_sort => false
            index => "service_error-*"
            result_size => 1
            fields => {
                "handled" => "[handled]"
            }
            docinfo_fields => {
                "_index" => "[old_index]"
                "_id" => "[old_id]"
            }
        }
    }

    ruby{
        code => "puts event.get('status');
        puts event.get('handled')"
    }

    #生成ID
    uuid {
        target => "[uuid]"
        overwrite => true
    }
}
output {
    #stdout{ codec => rubydebug }
    if [status][state] == "up" {
        if [old_id] and[handled] == '未处理' {
            #存在故障 现已修复 handled置为已处理
            elasticsearch {
                hosts => "${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"
                index => "%{[old_index]}"
                action => "update"
                document_id => "%{[old_id]}"
                script => "ctx._source['handled']='已处理';"
                scripted_upsert => true
            }
        }

    } else if [status][state] == "down" {
        if [old_id] {
            #关机且存在故障内容 只更新持续时间
            elasticsearch {
                hosts => "${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"
                index => "%{[old_index]}"
                action => "update"
                document_id => "%{[old_id]}"
                script => "ctx._source['duration']=params.event.get('duration');"
                scripted_upsert => true
            }
        } else {
            #关机但不存在故障内容 插入新信息
            elasticsearch {
                hosts => "${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"
                index => "service_error-%{+YYYY.MM.dd}"
                action => "update"
                document_id => "%{[uuid]}"
                script => "ctx._source['@timestamp']=params.event.get('@timestamp');
                ctx._source.errorType = '故障'; ctx._source.errorReason = 'nmap_lost';
                ctx._source.errorMsg = params.event.get('errorMsg'); ctx._source.duration = 0;
                ctx._source.ip = params.event.get('ipv4'); ctx._source.handled = '未处理';
                ctx._source.hostname = ''; ctx._source.serverName = ''; "
                scripted_upsert => true
            }
        }
    }
}