input {
    udp{
        port => "${LS_ERROR_METRICBEAT_UDP_PORT:7777}"
        codec => "json"
    }
}
filter {
    json {
        source => "message"
    }
    
    if [metricset][name] == "cpu" {
        #计算当前cpu使用率 cores > 0 ? (user.pct + system.pct)/cores : null
        if [system][cpu][cores] > 0 {
            ruby {
                code => "data = (event.get('[system][cpu][user][pct]').to_f + event.get('[system][cpu][system][pct]').to_f)/event.get('[system][cpu][cores]');
                event.set('true_use', data)"
            }
            mutate {  
                add_field => {
                  "errorReason"=>"cpu_high"
                } 
            }
            if [true_use] > 0.8 {
                ruby {
                    #转换为百分比并保留两位小数
                    code => "event.set('true_use_pct', sprintf('%.2f',event.get('true_use').to_f*100) + '%')"
                }
                mutate {  
                    add_field => {
                      "errorMsg"=>"cpu使用率太高,达到%{true_use_pct}"
                    } 
                }
            }
            
        } else {
            drop { }
        }
        
    } else if [metricset][name] == "memory" {
        #内存使用率用 system.memory.actual.used.pct
        if [system][memory][actual][used][pct] {
            mutate {  
                add_field => {
                  "errorReason"=>"mem_high"
                } 
            }
            if [system][memory][actual][used][pct] > 0.8 {
                ruby {
                    #转换为百分比并保留两位小数
                    code => "event.set('true_use_pct', sprintf('%.2f',event.get('[system][memory][actual][used][pct]').to_f*100) + '%')"
                }
                mutate {  
                    add_field => {
                      "errorMsg"=>"内存使用率太高,达到%{true_use_pct}"
                    } 
                }
            }
            
        } else {
            drop { }
        }
        
    } else if [metricset][name] == "fsstat" {
        #计算磁盘使用率params.total != null && params.total > 0 ? params.used/params.total : null
        if [system][fsstat][total_size][total] and [system][fsstat][total_size][total] > 0 {
            ruby {
                code => "data = event.get('[system][fsstat][total_size][used]').to_f/event.get('[system][fsstat][total_size][total]').to_f;
                event.set('true_use', data)"
            }
            mutate {  
                add_field => {
                  "errorReason"=>"disk_high"
                } 
            }
            if [true_use] > 0.8 {
                ruby {
                    #转换为百分比并保留两位小数
                    code => "event.set('true_use_pct', sprintf('%.2f',event.get('true_use').to_f*100) + '%')"
                }
                mutate {  
                    add_field => {
                      "errorMsg"=>"磁盘使用率太高,达到%{true_use_pct}"
                    } 
                }
            }
        } else {
            drop { }
        }
        
    
    } else {
        drop { }
    }
    
    #hostname放到外面 因为通过params.event获取不到beat.hostname
    ruby{
        code => "hostname = event.get('[beat][hostname]');
                 event.set('hostname',hostname)"
    }
    #设置ip
    if [fields][ip] {
        ruby{
            code => "event.set('ip',event.get('[fields][ip]'))"
        }
    }
    
    if [errorReason] {
        #通过主机名,预警原因查看有没有未解决的预警 没有就新增 有则更新持续时间
        elasticsearch {
          hosts => ["es1:9200/service_error-*/doc"]
          query => 'hostname:"%{[hostname]}" AND errorReason:"%{[errorReason]}" AND handled:"未处理"'
          enable_sort => false
          index =>"service_error-*"
          result_size => 1
          fields => {
            "@timestamp" => "[old_timestamp]"
            "duration" => "[duration]"
          }
          docinfo_fields => {
            "_index" => "[old_index]"
            "_id" => "[old_id]"
          }
        }
        if [old_id] {
            #计算持续时间
            ruby{
                code => "nowM = DateTime.strptime(event.get('@timestamp').to_s, '%Y-%m-%dT%H:%M:%S.%LZ').strftime('%s');
                         oldM = DateTime.strptime(event.get('old_timestamp').to_s, '%Y-%m-%dT%H:%M:%S.%LZ').strftime('%s');
                         event.set('duration',nowM.to_i - oldM.to_i)"
            }
            #有errorMsg才是预警
            if [errorMsg] {
                mutate {  
                    add_tag => ["updateTime"]
                }
            } else {
                mutate {  
                    add_tag => ["handled"]
                }
            }
            
        } else {
            if [errorMsg] {
                mutate {  
                    add_tag => ["newInsert"]
                }
            }
        }
        
        #生成ID
        uuid {
            target    => "[uuid]"
            overwrite => true
        }
        
    }
    
}
output {
    stdout{codec => rubydebug}
    if "newInsert" in [tags] {
        #新插入一条
        elasticsearch {
            hosts => "${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"
            index => "service_error-%{+YYYY.MM.dd}"
            action => "update"
            document_id => "%{[uuid]}"
            script => "ctx._source['@timestamp']=params.event.get('@timestamp');
            ctx._source.errorType='预警';ctx._source.errorReason=params.event.get('errorReason');
            ctx._source.errorMsg=params.event.get('errorMsg');ctx._source.duration=0;
            ctx._source.hostname=params.event.get('hostname');ctx._source.handled = '未处理';
            ctx._source.ip=params.event.get('ip');ctx._source.serverName='';"
            scripted_upsert => true
        }
    } else if "updateTime" in [tags] {
        #更新持续时间
        elasticsearch {
            hosts => "${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"
            index => "%{[old_index]}"
            action => "update"
            document_id => "%{[old_id]}"
            script => "ctx._source['duration']=params.event.get('duration');"
            scripted_upsert => true
        }
    } else if "handled" in [tags] {
        #存在预警 现已修复 handled置为已处理
        elasticsearch {
            hosts => "${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"
            index => "%{[old_index]}"
            action => "update"
            document_id => "%{[old_id]}"
            script => "ctx._source['duration']=params.event.get('duration');ctx._source['handled']='已处理';"
            scripted_upsert => true
        }
    }
}