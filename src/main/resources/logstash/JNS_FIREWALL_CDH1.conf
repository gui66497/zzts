input {
  #stdin {}
  tcp{
    port => "${LS_JNS_FIREWALL_PORT:10011}"
    codec => plain{
      charset => 'GBK'
    }
  }
  udp{
    port => "${LS_JNS_FIREWALL_PORT:10011}"
    codec => plain{
      charset => 'GBK'
    }
  }
}
filter {if ([message]=~".*       .*"){
  mutate {
    add_tag => ["_filterDrop"]
  }
}else{

  grok {
    match => {
      "message" => [
        ".*%{SYSLOGBASE2}\s(?<action>.*) a (?<protocol>.*) packet.*%{IPV4:srcIp}: %{NUMBER:srcPort}.*->%{IPV4:destIp}: %{NUMBER:destPort}.*was (?<result>.*)!",
        ".*%{TIME} (?<logsource>.*) (?<program>.*): %{NUMBER:num} - (?<protocol>.*)\((%{NUMBER:protocolPort}).*%{IPV4:srcIp} %{IPV4:destIp} %{NUMBER:receivePacket} %{NUMBER:sendPacket}",
        ".*%{SYSLOGBASE2}.*%{NUMBER:num} - (?<protocol>.*)\((%{NUMBER:protocolPort}).*%{IPV4:srcIp} %{IPV4:destIp}",
        ".*%{TIME} - - (?<action >.*)\(%{IPV4:destIp}\)(?<result >.*)",
        ".*%{SYSLOGBASE2}\s(?<msg >.*)",
        ".*%{YEAR}-\d{1,2}-\d{1,2} %{HOUR}:\d{1,2}:\d{1,2}.*status.log <cpu> %{NUMBER:[system][cpu][user][pct]}% used </cpu>",
        ".*%{YEAR}-\d{1,2}-\d{1,2} %{HOUR}:\d{1,2}:\d{1,2}.*status.log <mem> %{NUMBER:[system][memory][actual][used][pct]}% used </mem>",
        ".*%{YEAR}-\d{1,2}-\d{1,2} %{HOUR}:\d{1,2}:\d{1,2}.*status.log <disk> %{NUMBER:[system][fsstat][total_size][used]}% used </disk>"
      ]
    }
  }

}


if "_grokparsefailure" in [tags] or "_filterDrop" in [tags] {
mutate {
  add_field => {
    "[deviceType]"=>"jns防火墙"
  }
}
}else if [system][cpu][user][pct] {
  ruby {
    code => "event.set('[system][cpu][user][pct]',event.get('[system][cpu][user][pct]').to_f/100)
         event.set('[system][cpu][cores]',100)"
  }
}else if [system][fsstat][total_size][used] {
  ruby {
    code => "event.set('[system][fsstat][total_size][used]',event.get('[system][fsstat][total_size][used]').to_f/100)
         event.set('[system][fsstat][total_size][total]',100)"
  }
}else if [action] == 'filteralert' {
    #告警信息需要记录到eventlog表中
    clone {
    clones => ["alarm"]
  }
}

if [type] =="alarm" {
    elasticsearch {
    hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}/soc-system/res"]
    query => "ip:(%{[srcIp]})"
    index =>"soc-system"
    result_size => 1
    fields => {
      "manager" => "[userName]"
      "used" => "[used]"
      "location" => "[location]"
      "dept" => "[dept]"
    }
  }

  if ![used] {
    mutate {
      add_field => {
              "[used]"=>"终端"
          }
      rename => {
              "manager"=>"[userName]"
           }
         }
  }
  if ![userName] {
    ruby {
      code => "event.set('userName','未知')"
    }
  }
  mutate {
    add_field => {
      "[assetIP]"=>"%{[srcIp]}"
          "[assetName]"=>"%{userName}-%{used}-%{assetIP}"
          "[dataType]"=>"用户"
          "[eventType]"=>"防火墙报警"
      "[eventName]"=>"未经许可的连接"
      "[eventUserMsg]"=>"%{assetName}的主机向%{destIp}发起了%{eventName}"
        }
        rename => {
            "msg"=>"[eventDesc]"
            "location"=>"[eventUserMsg]"
            "dept"=>"[dept]"
         }
         add_field => {
      "[eventScore]"=>60
          "[eventPriority]"=>"中"
        }
        remove_field => ["program","result","logsource","action","message"," srcPort","destPort"," timestamp"]
       }
}

if [system] {
  mutate {
    rename => {
          "host"=>"[beat][hostname]"
        }
      }
}

mutate {
      convert => {"receivePacket" => "integer"}
      convert => {"sendPacket" => "integer"}
   }

}

output{
  #stdout {codec => rubydebug }
if "_grokparsefailure" in [tags] or "_filterDrop" in [tags] {
  elasticsearch {
    hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
    index => "unmatchedlog-%{+YYYY.MM.dd}"
  }
}else if [system] {
  elasticsearch {
    hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
    index => "metricbeat-6.2.2-%{+YYYY.MM.dd}"
  }
}else if [eventUserMsg] {
    elasticsearch {
          hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
          index => "eventlog_%{+YYYY.MM.dd}"
      }
}else {
  elasticsearch {
    hosts => ["${LS_ES_HOST:es1}:${LS_ES_PORT:9200}"]
    index => "firewall-jns-%{+YYYY.MM.dd}"
  }
}
}
